from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
import time
import os
from dotenv import load_dotenv, find_dotenv
import glob
from datetime import datetime
import pandas as pd
import chardet
from bot import send_message_to_chat
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
load_dotenv(find_dotenv())
NEXTCLOUD_URL = f'{os.getenv("NEXTCLOUD_URL")}'
USERNAME = f'{os.getenv("USERNAME_NXCD")}'
PASSWORD = f'{os.getenv("PASSWORD")}'
WORKING_DIR = os.path.dirname(os.path.abspath(__file__))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è

def cleanup_old_files(directory, pattern="*.csv", keep=1):
    """
    –£–¥–∞–ª—è–µ—Ç —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ {keep} —Å–∞–º—ã—Ö –Ω–æ–≤—ã—Ö
    """
    files = sorted(glob.glob(os.path.join(directory, pattern)),
                   key=os.path.getmtime, reverse=True)

    if len(files) > keep:
        for old_file in files[keep:]:
            os.remove(old_file)
            print(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {old_file}")


def download_deck_file(url):
    chrome_options = webdriver.ChromeOptions()
    prefs = {
        "download.default_directory": WORKING_DIR,
        "download.prompt_for_download": False,
        "download.directory_upgrade": True,
    }
    chrome_options.add_experimental_option("prefs", prefs)

    driver = webdriver.Chrome(options=chrome_options)

    try:
        # –õ–æ–≥–∏–Ω –≤ Nextcloud
        driver.get(url)
        time.sleep(1)

        # 2. –í–≤–æ–¥–∏–º –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å
        username_field = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.ID, "user"))
        )
        username_field.send_keys(USERNAME)

        password_field = driver.find_element(By.ID, "password")
        password_field.send_keys(PASSWORD)

        # 3. –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞ –ø–æ XPath (–≤–º–µ—Å—Ç–æ ID)
        login_button = driver.find_element(
            By.XPATH,
            '//button[@type="submit" and contains(@class, "button-vue")]'
        )
        login_button.click()
        time.sleep(2)

        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ—Å–∫–∏ (—É–∫–∞–∂–∏—Ç–µ –≤–∞—à URL)
        # driver.get(f"{NEXTCLOUD_URL}apps/deck/board/37/export")  # –ó–∞–º–µ–Ω–∏—Ç–µ 123 –Ω–∞ ID –¥–æ—Å–∫–∏
        driver.get(f"{NEXTCLOUD_URL}apps/deck/board/37")  # –ó–∞–º–µ–Ω–∏—Ç–µ 123 –Ω–∞ ID –¥–æ—Å–∫–∏
        time.sleep(3)

        # –û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é (—Ç—Ä–∏ —Ç–æ—á–∫–∏ –∏–ª–∏ —à–µ—Å—Ç–µ—Ä–µ–Ω–∫–∞)
        menu_button = driver.find_element(By.CSS_SELECTOR, "button.app-navigation-toggle")
        # menu_button = WebDriverWait(driver, 10).until(
        #     EC.presence_of_element_located((By.CSS_SELECTOR, "button.action-item__menutoggle"))
        # )
        ActionChains(driver).move_to_element(menu_button).click().perform()
        time.sleep(1)

        # –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å–∫—É"
        dots_button = driver.find_element(
            By.CSS_SELECTOR,
            ".app-navigation-entry__actions.action-item.action-item--default-popover.action-item--primary"
        )
        ActionChains(driver).move_to_element(dots_button).click().perform()
        time.sleep(1)
        export_button = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//button[contains(., '–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å–∫—É')]"))
        )
        export_button.click()
        time.sleep(5)  # –ñ–¥–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏—è

        print("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω!")
    finally:
        driver.quit()


def rename_with_current_date(filepath):
    """
    –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç —Ñ–∞–π–ª, –¥–æ–±–∞–≤–ª—è—è —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    """
    if not os.path.exists(filepath):
        return None

    dirname = os.path.dirname(filepath)
    filename, ext = os.path.splitext(os.path.basename(filepath))
    date_str = datetime.now().strftime("%Y-%m-%d_%H-%M")
    new_name = f"{date_str}{ext}"
    new_path = os.path.join(dirname, new_name)

    os.rename(filepath, new_path)
    print(f"–§–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: {new_path}")
    return new_path


def detect_encoding(file_path):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É —Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—â—å—é chardet"""
    with open(file_path, 'rb') as f:
        result = chardet.detect(f.read(10000))  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 10KB –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    return result['encoding']


def read_csv_to_dict(file_path):
    """–ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
        encoding = detect_encoding(file_path)
        print(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ {os.path.basename(file_path)}: {encoding}")

        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        df = pd.read_csv(file_path, sep='\t', quotechar='"', encoding=encoding,
                         on_bad_lines='warn', dtype=str, keep_default_na=False)

        # –ó–∞–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ None
        df = df.replace(['null', 'nan', '', 'None', 'NULL'], None)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        required_cols = ['–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏', '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞']
        missing_cols = [col for col in required_cols if col not in df.columns]
        if missing_cols:
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {missing_cols}")

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        df = df.applymap(lambda x: x.strip() if isinstance(x, str) else x)

        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
        cards = []
        for idx, row in df.iterrows():
            # –ë–∞–∑–æ–≤—ã–π –∫–ª—é—á
            base_key = f"{row['–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏']}|{row['–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞']}"

            # –ï—Å–ª–∏ —Ç–∞–∫–æ–π –∫–ª—é—á —É–∂–µ –µ—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å
            suffix = 1
            key = base_key
            while any(card['key'] == key for card in cards):
                suffix += 1
                key = f"{base_key}|{suffix}"

            card_data = {
                'key': key,
                'title': row['–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏'],
                'list_name': row['–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞'],
                'description': row.get('–û–ø–∏—Å–∞–Ω–∏–µ'),
                'labels': row.get('–ú–µ—Ç–∫–∏'),
                'due_date': row.get('Due date'),
                'created': row.get('–°–æ–∑–¥–∞–Ω–æ'),
                'updated': row.get('–ò–∑–º–µ–Ω–µ–Ω–æ')
            }
            cards.append(card_data)

        return {card['key']: card for card in cards}

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {os.path.basename(file_path)}: {str(e)}")
        raise


def format_value(value):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    if value is None:
        return "–ø—É—Å—Ç–æ"
    if isinstance(value, str) and 'T' in value:
        try:
            return datetime.fromisoformat(value.replace('Z', '+00:00')).strftime('%Y-%m-%d %H:%M')
        except ValueError:
            return value
    return str(value)


def compare_cards(file1, file2):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–∞ —Ñ–∞–π–ª–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–∞–∑–ª–∏—á–∏—è"""
    try:
        print(f"\n–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ 1: {os.path.basename(file1)}")
        data1 = read_csv_to_dict(file1)
        print(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ 2: {os.path.basename(file2)}")
        data2 = read_csv_to_dict(file2)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã: {str(e)}")
        return False

    all_keys = sorted(set(data1.keys()).union(set(data2.keys())))
    changes_found = False

    for key in all_keys:
        card1 = data1.get(key)
        card2 = data2.get(key)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
        base_key_parts = key.split('|')[:2]
        title = base_key_parts[0]
        list_name = base_key_parts[1] if len(base_key_parts) > 1 else "–ë–µ–∑ –≥—Ä—É–ø–ø—ã"

        if card1 is None:
            # –ù–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
            send_message(text=f"\nüÜï [–î–æ–±–∞–≤–ª–µ–Ω–æ] –í –≥—Ä—É–ø–ø–µ '{list_name}': '{title}'")
            print(f"\nüÜï [–î–æ–±–∞–≤–ª–µ–Ω–æ] –í –≥—Ä—É–ø–ø–µ '{list_name}': '{title}'")
            for field in ['description', 'labels', 'due_date', 'created', 'updated']:
                val = card2.get(field)
                if val is not None:
                    print(f"   {field}: {format_value(val)}")
            changes_found = True
            continue

        if card2 is None:
            # –£–¥–∞–ª–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
            send_message(text=f"\nüóëÔ∏è [–£–¥–∞–ª–µ–Ω–æ] –ò–∑ –≥—Ä—É–ø–ø—ã '{list_name}': '{title}'")
            print(f"\nüóëÔ∏è [–£–¥–∞–ª–µ–Ω–æ] –ò–∑ –≥—Ä—É–ø–ø—ã '{list_name}': '{title}'")
            changes_found = True
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π
        changes = []
        fields = [
            ('description', '–û–ø–∏—Å–∞–Ω–∏–µ'),
            ('labels', '–ú–µ—Ç–∫–∏'),
            ('due_date', 'Due date'),
            ('created', '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'),
            ('updated', '–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è')
        ]

        for field, display_name in fields:
            old_val = card1.get(field)
            new_val = card2.get(field)

            if old_val != new_val and not (pd.isna(old_val) and pd.isna(new_val)):
                changes.append(
                    f"{display_name}: –±—ã–ª–æ '{format_value(old_val)}', —Å—Ç–∞–ª–æ '{format_value(new_val)}'"
                )

        if changes:
            send_message(text=f"\nüîÑ [–ò–∑–º–µ–Ω–µ–Ω–æ] –í –≥—Ä—É–ø–ø–µ '{list_name}': '{title}'")
            print(f"\nüîÑ [–ò–∑–º–µ–Ω–µ–Ω–æ] –í –≥—Ä—É–ø–ø–µ '{list_name}': '{title}'")
            for change in changes:
                print(f"   - {change}")
            changes_found = True

    if not changes_found:
        print("\n‚úÖ –§–∞–π–ª—ã –∏–¥–µ–Ω—Ç–∏—á–Ω—ã, —Ä–∞–∑–ª–∏—á–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    else:
        print("\n–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

    return True


def send_message(text: str):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞
    :param text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    loop = asyncio.get_event_loop()
    return loop.run_until_complete(send_message_to_chat(text))


if __name__ == "__main__":

    while True:
        # 1. –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
        cleanup_old_files(WORKING_DIR, keep=1)
        # 2. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ (–≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)
        download_deck_file(NEXTCLOUD_URL)  # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        files = sorted(glob.glob(os.path.join(WORKING_DIR, "*.csv")),
                       key=os.path.getmtime, reverse=True)
        if files:
            downloaded_file = files[0]

        # 3. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å –¥–∞—Ç–æ–π
            print(f'{downloaded_file=}')
            renamed_file = rename_with_current_date(downloaded_file)
            all_files = sorted(glob.glob(os.path.join(WORKING_DIR, "*.csv")),
                               key=os.path.getmtime)
            if len(all_files) > 1:
                old_file = all_files[-2]  # –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ñ–∞–π–ª
                new_file = all_files[-1]  # –¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª
                compare_cards(old_file, new_file)
        else:
            print("–ù–µ—Ç CSV —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")

        time.sleep(300)
    #
    # all_files = sorted(glob.glob(os.path.join(WORKING_DIR, "*.csv")),
    #                    key=os.path.getmtime)
    # if len(all_files) > 1:
    #     old_file = all_files[-2]  # –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ñ–∞–π–ª
    #     new_file = all_files[-1]  # –¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª
    #     compare_cards(old_file, new_file)







